#include <check.h>
#include <math.h>
#include <stdlib.h>

#include "s21_math.h"

#define CHK_EPS 1e-6

#suite math_basic_functions_suite

#tcase s21_abs_test

#test abs_basic

int testcases[] = {-2147483648, -2147483647, -422112, -3458,  -2,        -1, -0,
                   0,           1,           2,       481516, 2147483647};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_int_eq(s21_abs(testcases[i]), abs(testcases[i]));

#tcase s21_fabs_test

#test fabs_basic

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      0.43,
                      -1e-10,
                      1e-4,
                      -4.2356e-2,
                      0.5,
                      -1.,
                      1.5,
                      -100.,
                      9.123123e6,
                      -1e4,
                      1e10,
                      S21_MAX_DOUBLE};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_ldouble_eq_tol(s21_fabs(testcases[i]), fabs(testcases[i]), CHK_EPS);

#test fabs_inf

double testcases[] = {S21_INF, -S21_INF};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_ldouble_infinite(s21_fabs(testcases[i]));

#test fabs_nan

ck_assert_ldouble_nan(s21_fabs(S21_NAN));

#tcase s21_fact_test

#test fact_test

int testcases[] = {1, 2, 5, 10};
int result[] = {1, 2, 120, 3628800};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_int_eq(s21_fact(testcases[i]), result[i]);

#suite math_fmod_suite

#tcase s21_fmod_test

#test fmod_basic

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      1e-10,
                      1e-4,
                      4.2356e-2,
                      0.43,
                      0.5,
                      0.999999,
                      1.,
                      1.0000001,
                      1.001,
                      1.008888,
                      1.01,
                      1.1,
                      1.5,
                      100.,
                      9.123123e6,
                      1e4,
                      1e10,
                      S21_MAX_DOUBLE};

size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  for (size_t j = 0; j < n; ++j)
    ck_assert_ldouble_eq_tol(s21_fmod(testcases[i], testcases[j]),
                             fmod(testcases[i], testcases[j]), CHK_EPS);

#test fmod_inf

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      0.,
                      0.43,
                      1e-10,
                      1e-4,
                      4.2356e-2,
                      0.5,
                      1.,
                      1.5,
                      100.,
                      9.123123e6,
                      1e4,
                      1e10,
                      S21_MAX_DOUBLE};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_ldouble_eq_tol(s21_fmod(testcases[i], S21_INF),
                           fmod(testcases[i], S21_INF), CHK_EPS);

#test fmod_nan

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      0.,
                      0.43,
                      1e-10,
                      1e-4,
                      4.2356e-2,
                      0.5,
                      1.,
                      1.5,
                      100.,
                      9.123123e6,
                      1e4,
                      1e10,
                      S21_MAX_DOUBLE};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i) {
  ck_assert_ldouble_nan(s21_fmod(testcases[i], 0));
  ck_assert_ldouble_nan(fmod(testcases[i], 0));
  ck_assert_ldouble_nan(s21_fmod(S21_NAN, testcases[i]));
  ck_assert_ldouble_nan(fmod(S21_NAN, testcases[i]));
}

#suite math_round_suite

#tcase s21_trunc_test

#test trunc_basic

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      0.,
                      1e-10,
                      1e-4,
                      4.2356e-2,
                      0.43,
                      0.5,
                      0.999999,
                      1.,
                      1.0000001,
                      1.001,
                      1.008888,
                      1.01,
                      1.1,
                      1.5,
                      100.,
                      9.123123e6,
                      1e4,
                      1e10,
                      S21_MAX_DOUBLE};

size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_ldouble_eq_tol(s21_trunc(testcases[i]), trunc(testcases[i]),
                           CHK_EPS);

#test trunc_inf

double testcases[] = {-S21_INF, S21_INF};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i) {
  ck_assert_ldouble_infinite(s21_trunc(testcases[i]));
  ck_assert_ldouble_infinite(trunc(testcases[i]));
}

#test trunc_nan

ck_assert_ldouble_nan(s21_trunc(S21_NAN));
ck_assert_ldouble_nan(trunc(S21_NAN));

#tcase s21_floor_test

#test floor_basic

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      0.,
                      1e-10,
                      1e-4,
                      4.2356e-2,
                      0.43,
                      0.5,
                      0.999999,
                      1.,
                      1.0000001,
                      1.001,
                      1.008888,
                      1.01,
                      1.1,
                      1.5,
                      100.,
                      9.123123e6,
                      1e4,
                      1e10,
                      S21_MAX_DOUBLE};

size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_ldouble_eq_tol(s21_floor(testcases[i]), floor(testcases[i]),
                           CHK_EPS);

#test floor_inf

double testcases[] = {-S21_INF, S21_INF};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i) {
  ck_assert_ldouble_infinite(s21_floor(testcases[i]));
  ck_assert_ldouble_infinite(floor(testcases[i]));
}

#test floor_nan

ck_assert_ldouble_nan(s21_floor(S21_NAN));
ck_assert_ldouble_nan(floor(S21_NAN));

#tcase s21_ceil_test

#test ceil_basic

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      0.,
                      1e-10,
                      1e-4,
                      4.2356e-2,
                      0.43,
                      0.5,
                      0.999999,
                      1.,
                      1.0000001,
                      1.001,
                      1.008888,
                      1.01,
                      1.1,
                      1.5,
                      100.,
                      9.123123e6,
                      1e4,
                      1e10,
                      S21_MAX_DOUBLE};

size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_ldouble_eq_tol(s21_ceil(testcases[i]), ceil(testcases[i]), CHK_EPS);

#test ceil_inf

double testcases[] = {-S21_INF, S21_INF};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i) {
  ck_assert_ldouble_infinite(s21_ceil(testcases[i]));
  ck_assert_ldouble_infinite(ceil(testcases[i]));
}

#test ceil_nan

ck_assert_ldouble_nan(s21_ceil(S21_NAN));
ck_assert_ldouble_nan(ceil(S21_NAN));

#tcase s21_round_test

#test round_basic

double testcases[] = {-S21_MAX_DOUBLE,
                      -1e20,
                      -7.4143526437e3,
                      -3144.51e-4,
                      0.,
                      1e-10,
                      1e-4,
                      4.2356e-2,
                      0.43,
                      0.5,
                      0.999999,
                      1.,
                      1.0000001,
                      1.001,
                      1.008888,
                      1.01,
                      1.1,
                      1.5,
                      100.,
                      9.123123e6,
                      1e4,
                      1e10,
                      S21_MAX_DOUBLE};

size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i)
  ck_assert_ldouble_eq_tol(s21_round(testcases[i]), round(testcases[i]),
                           CHK_EPS);

#test round_inf

double testcases[] = {-S21_INF, S21_INF};
size_t n = sizeof(testcases) / sizeof(testcases[0]);

for (size_t i = 0; i < n; ++i) {
  ck_assert_ldouble_infinite(s21_round(testcases[i]));
  ck_assert_ldouble_infinite(round(testcases[i]));
}

#test round_nan

ck_assert_ldouble_nan(s21_round(S21_NAN));
ck_assert_ldouble_nan(round(S21_NAN));